# **************************************************************************** #
#                                                           LE - /             #
#                                                               /              #
#    put_pixel.gbs                                    .::    .:/ .      .::    #
#                                                  +:+:+   +:    +:  +:+:+     #
#    By: fcordon <marvin@le-101.fr>                 +:+   +:    +:    +:+      #
#                                                  #+#   #+    #+    #+#       #
#    Created: 2019/09/12 22:15:34 by fcordon      #+#   ##    ##    #+#        #
#    Updated: 2019/09/14 20:42:04 by fcordon     ###    #+. /#+    ###.fr      #
#                                                          /                   #
#                                                         /                    #
# **************************************************************************** #

## USAGE
##
##	the first time, call	_set_put_pixel_character_code
##		
##	call		_lcdc_off				stop lcdc before print
##	call		_clean_character_data	reset all pixels
##	call		_put_pixel				set a pixel
##	call		_lcdc_on				start lcdc to print the image
##
##	virtual screen contains 16 * 14 tiles (128 * 112 px = 14336)
##


%define LCDC_ON			0x80
%define BG_ON			0x01
%define BG_AREA_8000	0x10


_lcdc_off:	## lcdc_off(void)
#{
	ld		A,		[_LCDC]
	and		0x80
	retz	## if LCDC is off

	__LO_wait_vertical_blank:
		ld		A,	[_LY]
		cp		145
		jrnz	__LO_wait_vertical_blank

		ld	A,			[_LCDC]
		and	(~LCDC_ON & 0xff)
		ld	[_LCDC],	A
	ret
#}

_lcdc_on:	## lcdc_on(void)
#{
	ld	A,	[_LCDC]
	or	A,	(LCDC_ON | BG_AREA_8000 | BG_ON)
	ld	[_LCDC],	A
	ret
#}


##		bit to set addr	= (0x8000 + (X / 8) + ((Y % 8) * 2) + ((Y / 8) * 160 * 2))
##		bit to set		= (X % 8)
_put_pixel:		## put_pixel(x = A, y = C, E = color)
#{
	push	BC
	push	DE

	ld		D,	A		## store A

	## get remainder and result of division (X)
	and		0xF8
	sla		A
	ld		E,	A

	ld		A,	D		## restore A
	and		A,	0x7
	
	ld		L,	A
	push	HL				## push remainder	(X % 8)
	push	DE				## push result		(X * 2)

	ld		A,	C
	## get remainder and result of division (X)
	srl		C
	srl		C
	srl		C

	and		A,	0x7
	sla		A				## A *= 2
	
	ld		L,	A
	push	HL				## push remainder	(Y % 8) * 2


	ld		A,	C
	call	_STATIC_FUNCTION__mul_per_256	## A *= 256 (result = HL)


	ld		BC,	0x8000		## VRAM bg character data
	add		HL,	BC
	pop		DE
	ld		B,	0
	ld		C,	E			## ld	C,	(Y % 8) * 2
	add		HL,	BC
	pop		DE
	ld		C,	E			## ld	C,	(X / 8)
	add		HL,	BC

	pop		BC				## C = bit
	ld		A,	[HL]		## A = 8 pixels byte (in line)
	pop		DE				## E = color
	push	DE				## store a copy of DE in stack (callee saved)
	push	HL				## store address of the 2 bytes to set
##	get the bit to set
	ld		HL,	__bit_mask
	ld		B,	0
	add		HL,	BC

##	set lo bit, if color lo bit = 0, reset this bit.
##	set hi bit, if color hi bit = 0, reset this bit.
	or		A,	[HL]		## set the bit
	ld		D,	A			## D = bit set
	pop		HL
	bit		0,	E
	jrnz	__set_high_bit
	__clean_lo_bit:
	xor		A,	D			## reset the bit
	__set_high_bit:
	ld		[HL++],	A		## store the new byte
	ld		A,		[HL]	## load the next byte
	or		A,	D			## set the bit
	bit		1,	E
	jrnz	__return
	__clean_hi_bit:
	xor		A,	D			## reset the bit
	__return:
	ld		[HL],	A		## store the new byte

	pop		DE
	pop		BC
	ret

	__bit_mask:	.byte	0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01
#}


_STATIC_FUNCTION__set_bit:		## set_bit(A = number, C = bit_number)
#{
	push	BC

	ld	HL,	__SB_bit
	ld	B,	0
	add	HL,	BC
	or	A,	[HL]

	pop	BC
	ret

	__SB_bit:	.byte	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80
#}

#>> = srl
#<< = sla
#9 >> 3 = 9 / 8
#9 & 0x07 = 9 % 8

_STATIC_FUNCTION__mul_per_256:	## mul_per_256(n = A)	{result = HL}
#{
	push	BC
#	push	DE

	ld	C,	A
	ld	B,	0

	ld	HL,	__256_hi_mul
	add	HL,	BC
	ld	H,	[HL]
	ld	L,	0

#	ld	HL,	__320_lo_mul
#	add	HL,	BC
#	ld	E,	[HL]

#	ld	H,	D
#	ld	L,	E

#	pop		DE
	pop		BC
	ret

	__256_hi_mul:
		.byte	0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x07\
				0x08 0x09 0x0A 0x0B 0x0C 0x0D 0x0E 0x0F 0x10 0x11 0x12
	__320_lo_mul:
		.byte	0x00 0x40 0x80 0xC0 0x00 0x40 0x80 0xC0\
				0x00 0x40 0x80 0xC0 0x00 0x40 0x80 0xC0 0x00 0x40 0x80

#	__160_hi_mul:
#		.byte	0x00 0x00 0x01 0x01 0x02 0x03 0x03 0x04\
#				0x05 0x05 0x06 0x06 0x07 0x08 0x08 0x09 0x0A 0x0A 0x0B
#	__160_lo_mul:
#		.byte	0x00 0xA0 0x40 0xE0 0x80 0x20 0xC0 0x60\
#				0x00 0xA0 0x40 0xE0 0x80 0x20 0xC0 0x60 0x00 0xA0 0x40
#}


_clean_character_data:
#{
	push	BC

	ld	HL,	0x8000
	ld	C,	0xFF
	xor	A
	__CCD_loop:
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		dec	C
		jrnz	__CCD_loop
	
	pop		BC
	ret
#}


##	memory become like this :	
##	{	 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
##		10,11,12,13,14,15,16,17,18,19,
##		?,?,?,?,?,?,?,?,?,?,?,?,
##		20,21,22,23,24,25,26,27,28,29,
##	...}
_set_put_pixel_character_code:
#{
	push	BC
	push	DE


	ld	HL,	0x9800
	ld	C,	14
	xor	A
	ld	D,	A
	__SPPCC_loop:
		ld	[HL++],	A
		inc	A
		ld	[HL++],	A
		inc	A
		ld	[HL++],	A
		inc	A
		ld	[HL++],	A
		inc	A
		ld	[HL++],	A
		inc	A
		ld	[HL++],	A
		inc	A
		ld	[HL++],	A
		inc	A
		ld	[HL++],	A
		inc	A
		ld	[HL++],	A
		inc	A
		ld	[HL++],	A
		inc	A
		ld	[HL++],	A
		inc	A
		ld	[HL++],	A
		inc	A
		ld	[HL++],	A
		inc	A
		ld	[HL++],	A
		inc	A
		ld	[HL++],	A
		inc	A
		ld	[HL++],	A
		inc	A
		ld	E,		A

		ld	A,		0xFF
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	A,		E
		ld	E,		12
		add	HL,		DE

		dec	C
		jrnz	__SPPCC_loop


	ld	C,	4
	ld	A,	0xFF
	ld	E,	12
	__SPPCC_loop2:
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		ld	[HL++],	A
		add	HL,		DE
		dec	C
		jrnz	__SPPCC_loop2

	
	pop		DE
	pop		BC
	ret
#}
