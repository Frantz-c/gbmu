# **************************************************************************** #
#                                                           LE - /             #
#                                                               /              #
#    ascii_printer.gbs                                .::    .:/ .      .::    #
#                                                  +:+:+   +:    +:  +:+:+     #
#    By: fcordon <fcordon@le-101.fr>                +:+   +:    +:    +:+      #
#                                                  #+#   #+    #+    #+#       #
#    Created: 2019/09/10 16:06:26 by fcordon      #+#   ##    ##    #+#        #
#    Updated: 2019/09/12 19:15:26 by fcordon     ###    #+. /#+    ###.fr      #
#                                                          /                   #
#                                                         /                    #
# **************************************************************************** #



##	exemple:
##
##	HL = "result = ~\0"
##	arguments sur la stack

.memlock	tmp, 0xFF80, 0xFF84
.var2		stack_ptr, tmp
.var1		count, tmp
.var1		curline,	tmp


# LCDC OPTIONS #
%define LCDC_ON			0x80
%define BG_DISPLAY_ON	0x01
%define BG_AREA_8000	0x10

# VARIABLE ARGUMENT PROCEDURES #
%define	VA_START(var, reg, hi, lo)\
	pop		reg\
	ld		A,			hi\
	ld		[var],		A\
	ld		A,			lo\
	ld		[var + 1],	A

%define VA_END(var, reg, hi, lo)\
	ld		A,	[var]\
	ld		hi,	A\
	ld		A,	[var + 1]\
	ld		lo,	A\
	push	reg


_load_ascii:
	push	AF
	push	BC
	push	DE
	push	HL

	## disable LCDC
		ld		A,		[_LCDC]
		and		0x80
		jrz		__AP_next		## if LCDC is off

		__AP_wait_vertical_blank:
			ld	A,	[_LY]
			cp		145
			jrnz	__AP_wait_vertical_blank

			ld	A,			[_LCDC]
			and	(~LCDC_ON & 0xff)
			ld	[_LCDC],	A

	__AP_next:
	ld	HL,	0x8000
	ld	BC,	__AP_ascii_table
	ld	D,	94
	__AP_loop:
		ld	A,		[BC]
		inc	BC
		ld	[HL++],	A
		ld	A,		[BC]
		inc	BC
		ld	[HL++],	A
		ld	A,		[BC]
		inc	BC
		ld	[HL++],	A
		ld	A,		[BC]
		inc	BC
		ld	[HL++],	A
		ld	A,		[BC]
		inc	BC
		ld	[HL++],	A
		ld	A,		[BC]
		inc	BC
		ld	[HL++],	A
		ld	A,		[BC]
		inc	BC
		ld	[HL++],	A
		ld	A,		[BC]
		inc	BC
		ld	[HL++],	A
		ld	A,		[BC]
		inc	BC
		ld	[HL++],	A
		ld	A,		[BC]
		inc	BC
		ld	[HL++],	A
		ld	A,		[BC]
		inc	BC
		ld	[HL++],	A
		ld	A,		[BC]
		inc	BC
		ld	[HL++],	A
		ld	A,		[BC]
		inc	BC
		ld	[HL++],	A
		ld	A,		[BC]
		inc	BC
		ld	[HL++],	A
		ld	A,		[BC]
		inc	BC
		ld	[HL++],	A
		ld	A,		[BC]
		inc	BC
		ld	[HL++],	A
		dec	D
		ld	A,		D
		cp	0
		jrnz	__AP_loop

		pop		HL
		pop		DE
		pop		BC
		pop		AF
		ret


_AP_STATIC_FUNCTION__print_newline:
#{
	ld		A,			[curline]
	cp		0xE0
	jrnz	__AP_D_no_inc
	inc		D

	__AP_D_no_inc:
	add		A,			0x20
	ld		E,			A
	ld		[curline],	A
	xor		A
	ret
#}

_AP_STATIC_FUNCTION__print_one_digit:
#{
	ld		B,	A
	sub		A,	10
	and		A,	0xf8
	cp		A,	0

	jrz		__AP_print_alpha_hex
	ld		A,	B
	add		A,	16		# 0 = ' ', 16 = '0'
	jr		__AP_print_digit

	__AP_print_alpha_hex:
		ld		A,	B
		add		A,	23
	__AP_print_digit:
		ld		[DE],	A
		inc		DE
		ret
#}




## ~EXTERN_FUNCTION~ ##
_print_string:
#{
	xor		A
	ld		[count],			A	# count line length
	ld		[curline],			A	# line addr
	VA_START(stack_ptr, BC, B, C)
	push	HL



	## disable LCDC
		ld		A,		[_LCDC]
		and		0x80
		jrz	__AP_reset_scroll_XY		## if LCDC is off

		__AP_wait_vb:
			ld	A,	[_LY]
			cp		145
			jrnz	__AP_wait_vb

			ld	A,			[_LCDC]
			and	(~LCDC_ON & 0xff)
			ld	[_LCDC],	A

		__AP_reset_scroll_XY:
			xor	A
			ld	[_SCY],		A
			ld	[_SCX],		A




	## fill screen with spaces
		ld	HL,		0x9800
		__AP_fill_with_spaces:
			xor	A
			ld	[HL++],	A
			ld	[HL++],	A
			ld	[HL++],	A
			ld	[HL++],	A
			ld	[HL++],	A
			ld	[HL++],	A
			ld	[HL++],	A
			ld	[HL++],	A
			ld	[HL++],	A
			ld	[HL++],	A
			ld	[HL++],	A
			ld	[HL++],	A
			ld	[HL++],	A
			ld	[HL++],	A
			ld	[HL++],	A
			ld	[HL++],	A
			ld	A,		H
			cp	0x9C
			jrnz	__AP_fill_with_spaces




	## print string with replacement
		pop	HL
		ld	DE,	0x9800

		__AP_print_loop:
			ld		A,	[HL++]
			cp		A,	0				# '\0'
			jrz		__AP_enable_lcdc

			cp		A,	10				# '\n'
	## if (A != '\n') jump __AP_next_cp
			jrnz	__AP_next_cp
	## else
			call	_AP_STATIC_FUNCTION__print_newline
			ld		[count],	A
			jr		__AP_print_loop
	## endif


		__AP_next_cp:
			cp		A,	126				# '~'
	## if (A != '~')
			jrnz	__AP_print_character
	## else {print register value}
			push	AF
			ld		A,			[count]
			cp		A,			19
			jrz		__AP_call_print_newline
			cp		A,			20
		__AP_call_print_newline:
			callz	_AP_STATIC_FUNCTION__print_newline

		## print value in hexadecimal
			inc		A
			inc		A
			ld		[count],	A	## count += 2 (2 digits length)
			pop		AF
			pop		BC	# number is C
			push	AF

			ld		A,	C
			and		A,	0xf0
			srl		A
			srl		A
			srl		A
			srl		A
		
			call	_AP_STATIC_FUNCTION__print_one_digit

			ld		A,		C
			and		0x0f

			call	_AP_STATIC_FUNCTION__print_one_digit

			pop		AF
			jr		__AP_print_loop
	## endif



		__AP_print_character:
	## check cur column and inc count (column)
			push	AF
			ld		A,			[count]
			cp		A,			20
			callz	_AP_STATIC_FUNCTION__print_newline

			inc		A
			ld		[count],	A
			pop		AF
	## print character
			sub		A,	32
			ld		[DE],	A
			inc		DE
			jr		__AP_print_loop


	## END
	__AP_enable_lcdc:
		ld		A,			[_LCDC]
		or		A,			LCDC_ON | BG_AREA_8000 | BG_DISPLAY_ON
		ld		[_LCDC],	A
		VA_END(stack_ptr, BC, B, C)
		ret
#}


## .bank	0,	0x3000
__AP_ascii_table:
	__AP_SPACE:		.byte	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	__AP_EXCL:		.byte	0x18 0x18 0x3c 0x3c 0x3c 0x3c 0x3c 0x3c 0x18 0x18 0x00 0x00 0x18 0x18 0x18 0x18 
	__AP_DQUOTE:	.byte	0x28 0x28 0x28 0x28 0x28 0x28 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	__AP_SHARP:		.byte	0x12 0x12 0x12 0x12 0xff 0xff 0x24 0x24 0x24 0x24 0xff 0xff 0x48 0x48 0x48 0x48
	__AP_DOLLAR:	.byte	0x78 0x78 0xAC 0xAC 0xA8 0xA8 0x7C 0x7C 0x2A 0x2A 0xAA 0xAA 0x7C 0x7C 0x28 0x28 
	__AP_PERCENT:	.byte	0x42 0x42 0xA4 0xA4 0x48 0x48 0x10 0x10 0x24 0x24 0x4A 0x4A 0x84 0x84 0x00 0x00
	__AP_AND:		.byte	0x70 0x70 0x88 0x88 0x50 0x50 0x62 0x62 0x94 0x94 0x88 0x88 0x76 0x76 0x00 0x00
	__AP_QUOTE:		.byte	0x60 0x60 0x60 0x60 0x20 0x20 0x40 0x40 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
	__AP_PARENT_O:	.byte	0x06 0x06 0x08 0x08 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x08 0x06 0x06 0x00 0x00
	__AP_PARENT_C:	.byte	0xc0 0xc0 0x20 0x20 0x10 0x10 0x10 0x10 0x10 0x10 0x20 0x20 0xc0 0xc0 0x00 0x00
	__AP_STAR:		.byte	0x10 0x10 0x54 0x54 0x38 0x38 0x54 0x54 0x10 0x10 0x00 0x00 0x00 0x00 0x00 0x00
	__AP_PLUS:		.byte	0x00 0x00 0x10 0x10 0x10 0x10 0x7c 0x7c 0x10 0x10 0x10 0x10 0x00 0x00 0x00 0x00 
	__AP_COMA:		.byte	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x60 0x60 0x60 0x60 0x20 0x20 0x40 0x40 
	__AP_MINUS:		.byte	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x3c 0x3c 0x00 0x00 0x00 0x00 0x00 0x00 
	__AP_POINT:		.byte	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x60 0x60 0x60 0x60 0x00 0x00 
	__AP_DIV:		.byte	0x00 0x00 0x02 0x02 0x04 0x04 0x08 0x08 0x10 0x10 0x20 0x20 0x40 0x40 0x80 0x80 
	__AP_0:			.byte	0x00 0x00 0x38 0x38 0x4c 0x4c 0xc6 0xc6 0xc6 0xc6 0x64 0x64 0x38 0x38 0x00 0x00 
	__AP_1:			.byte	0x00 0x00 0x18 0x18 0x38 0x38 0x18 0x18 0x18 0x18 0x18 0x18 0x7e 0x7e 0x00 0x00 
	__AP_2:			.byte	0x00 0x00 0x7c 0x7c 0xc6 0xc6 0x0e 0x0e 0x78 0x78 0xe0 0xe0 0xfe 0xfe 0x00 0x00 
	__AP_3:			.byte	0x00 0x00 0x7e 0x7e 0x0c 0x0c 0x38 0x38 0x06 0x06 0xc6 0xc6 0x7c 0x7c 0x00 0x00 
	__AP_4:			.byte	0x00 0x00 0x1c 0x1c 0x3c 0x3c 0x6c 0x6c 0xcc 0xcc 0xfe 0xfe 0x0c 0x0c 0x00 0x00 
	__AP_5:			.byte	0x00 0x00 0xfc 0xfc 0xc0 0xc0 0xfc 0xfc 0x06 0x06 0xc6 0xc6 0x7c 0x7c 0x00 0x00 
	__AP_6:			.byte	0x00 0x00 0x7c 0x7c 0xc0 0xc0 0xfc 0xfc 0xc6 0xc6 0xc6 0xc6 0x7c 0x7c 0x00 0x00 
	__AP_7:			.byte	0x00 0x00 0xfe 0xfe 0xc6 0xc6 0x0c 0x0c 0x18 0x18 0x30 0x30 0x30 0x30 0x00 0x00 
	__AP_8:			.byte	0x00 0x00 0x7c 0x7c 0xc6 0xc6 0x7c 0x7c 0xc6 0xc6 0xc6 0xc6 0x7c 0x7c 0x00 0x00 
	__AP_9:			.byte	0x00 0x00 0x7c 0x7c 0xc6 0xc6 0xc6 0xc6 0x7e 0x7e 0x06 0x06 0x7c 0x7c 0x00 0x00 
	__AP_COLON:		.byte	0x00 0x00 0x18 0x18 0x18 0x18 0x00 0x00 0x00 0x00 0x18 0x18 0x18 0x18 0x00 0x00
	__AP_SCOLON:	.byte	0x00 0x00 0x18 0x18 0x18 0x18 0x00 0x00 0x18 0x18 0x18 0x18 0x08 0x08 0x10 0x10
	__AP_LT:		.byte	0x06 0x06 0x18 0x18 0x60 0x60 0x80 0x80 0x60 0x60 0x18 0x18 0x06 0x06 0x00 0x00
	__AP_EQ:		.byte	0x00 0x00 0x00 0x00 0x7E 0x7E 0x00 0x00 0x00 0x00 0x7E 0x7E 0x00 0x00 0x00 0x00 
	__AP_GT:		.byte	0xC0 0xC0 0x30 0x30 0x0C 0x0C 0x02 0x02 0x0C 0x0C 0x30 0x30 0xC0 0xC0 0x00 0x00
	__AP_ATENA:		.byte	0x00 0x00 0x7e 0x7e 0xe7 0xe7 0xce 0xce 0x18 0x18 0x00 0x00 0x18 0x18 0x18 0x18 
	__AP_AROBASE:	.byte	0x38 0x38 0x44 0x44 0x9A 0x9A 0xAA 0xAA 0xAA 0xAA 0x9C 0x9C 0x40 0x40 0x00 0x00
	__AP_A_MAJ:		.byte	0x10 0x10 0x28 0x28 0x28 0x28 0x44 0x44 0x7c 0x7c 0x82 0x82 0x82 0x82 0x00 0x00 
	__AP_B_MAJ:		.byte	0xf8 0xf8 0x84 0x84 0x84 0x84 0xfc 0xfc 0x82 0x82 0x82 0x82 0xfc 0xfc 0x00 0x00 
	__AP_C_MAJ:		.byte	0x3c 0x3c 0x42 0x42 0x80 0x80 0x80 0x80 0x80 0x80 0x42 0x42 0x3c 0x3c 0x00 0x00 
	__AP_D_MDJ:		.byte	0xf8 0xf8 0x84 0x84 0x82 0x82 0x82 0x82 0x82 0x82 0x84 0x84 0xf8 0xf8 0x00 0x00 
	__AP_E_MAJ:		.byte	0xfe 0xfe 0x80 0x80 0x80 0x80 0xfc 0xfc 0x80 0x80 0x80 0x80 0xfe 0xfe 0x00 0x00 
	__AP_F_MAJ:		.byte	0xfe 0xfe 0x80 0x80 0x80 0x80 0xfc 0xfc 0x80 0x80 0x80 0x80 0x80 0x80 0x00 0x00 
	__AP_G_MAJ:		.byte	0x3c 0x3c 0x42 0x42 0x80 0x80 0x9e 0x9e 0x82 0x82 0x42 0x42 0x3c 0x3c 0x00 0x00 
	__AP_H_MAJ:		.byte	0x82 0x82 0x82 0x82 0x82 0x82 0xfe 0xfe 0x82 0x82 0x82 0x82 0x82 0x82 0x00 0x00 
	__AP_I_MAJ:		.byte	0x7c 0x7c 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x7c 0x7c 0x00 0x00 
	__AP_J_MAJ:		.byte	0x7e 0x7e 0x08 0x08 0x08 0x08 0x08 0x08 0x88 0x88 0x88 0x88 0x70 0x70 0x00 0x00 
	__AP_K_MAJ:		.byte	0x84 0x84 0x88 0x88 0x90 0x90 0xb0 0xb0 0xc8 0xc8 0x84 0x84 0x82 0x82 0x00 0x00 
	__AP_L_MAJ:		.byte	0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0xfe 0xfe 0x00 0x00 
	__AP_M_MAJ:		.byte	0x82 0x82 0xc6 0xc6 0xaa 0xaa 0x92 0x92 0x82 0x82 0x82 0x82 0x82 0x82 0x00 0x00 
	__AP_N_MAJ:		.byte	0x82 0x82 0xc2 0xc2 0xa2 0xa2 0x92 0x92 0x8a 0x8a 0x86 0x86 0x82 0x82 0x00 0x00 
	__AP_O_MAJ:		.byte	0x38 0x38 0x44 0x44 0x82 0x82 0x82 0x82 0x82 0x82 0x44 0x44 0x38 0x38 0x00 0x00 
	__AP_P_MAJ:		.byte	0xfc 0xfc 0x82 0x82 0x82 0x82 0xfc 0xfc 0x80 0x80 0x80 0x80 0x80 0x80 0x00 0x00 
	__AP_Q_MAJ:		.byte	0x38 0x38 0x44 0x44 0x82 0x82 0x82 0x82 0x8a 0x8a 0x44 0x44 0x3a 0x3a 0x00 0x00 
	__AP_R_MAJ:		.byte	0xfc 0xfc 0x82 0x82 0x82 0x82 0xfc 0xfc 0x88 0x88 0x84 0x84 0x82 0x82 0x00 0x00 
	__AP_S_MAJ:		.byte	0x78 0x78 0x84 0x84 0x80 0x80 0x7c 0x7c 0x02 0x02 0x82 0x82 0x7c 0x7c 0x00 0x00 
	__AP_T_MAJ:		.byte	0xfe 0xfe 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x00 0x00 
	__AP_U_MAJ:		.byte	0x82 0x82 0x82 0x82 0x82 0x82 0x82 0x82 0x82 0x82 0x42 0x42 0x3e 0x3e 0x00 0x00 
	__AP_V_MAJ:		.byte	0x82 0x82 0x82 0x82 0x44 0x44 0x44 0x44 0x28 0x28 0x28 0x28 0x10 0x10 0x00 0x00 
	__AP_W_MAJ:		.byte	0x82 0x82 0x92 0x92 0xaa 0xaa 0xaa 0xaa 0xc6 0xc6 0xc6 0xc6 0x82 0x82 0x00 0x00 
	__AP_X_MAJ:		.byte	0xc6 0xc6 0x44 0x44 0x28 0x28 0x10 0x10 0x28 0x28 0x44 0x44 0xc6 0xc6 0x00 0x00 
	__AP_Y_MAJ:		.byte	0x82 0x82 0x44 0x44 0x28 0x28 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x00 0x00 
	__AP_Z_MAJ:		.byte	0xfe 0xfe 0x04 0x04 0x08 0x08 0x10 0x10 0x20 0x20 0x40 0x40 0xfe 0xfe 0x00 0x00 
	__AP_BRACK_O:	.byte	0x07 0x07 0x04 0x04 0x04 0x04 0x04 0x04 0x04 0x04 0x04 0x04 0x07 0x07 0x00 0x00
	__AP_BSLASH:	.byte	0x80 0x80 0x40 0x40 0x20 0x20 0x10 0x10 0x08 0x08 0x04 0x04 0x02 0x02 0x00 0x00
	__AP_BRACK_C:	.byte	0xe0 0xe0 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0xe0 0xe0 0x00 0x00
	__AP_XOR:		.byte	0x10 0x10 0x28 0x28 0x44 0x44 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	__AP_UNDERSC:	.byte	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xff 0xff
	__AP_ACCENT:	.byte	0x20 0x20 0x10 0x10 0x08 0x08 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	__AP_A:			.byte	0x00 0x00 0x00 0x00 0x38 0x38 0x04 0x04 0x3c 0x3c 0x44 0x44 0x3e 0x3e 0x00 0x00
	__AP_B:			.byte	0x40 0x40 0x40 0x40 0x40 0x40 0x7c 0x7c 0x42 0x42 0x42 0x42 0x7c 0x7c 0x00 0x00
	__AP_C:			.byte	0x00 0x00 0x00 0x00 0x3c 0x3c 0x42 0x42 0x40 0x40 0x42 0x42 0x3c 0x3c 0x00 0x00
	__AP_D:			.byte	0x02 0x02 0x02 0x02 0x02 0x02 0x3e 0x3e 0x42 0x42 0x42 0x42 0x3e 0x3e 0x00 0x00
	__AP_E:			.byte	0x00 0x00 0x00 0x00 0x3c 0x3c 0x42 0x42 0x7e 0x7e 0x40 0x40 0x3e 0x3e 0x00 0x00
	__AP_F:			.byte	0x0c 0x0c 0x12 0x12 0x10 0x10 0x7e 0x7e 0x10 0x10 0x10 0x10 0x10 0x10 0x00 0x00
	__AP_G:			.byte	0x00 0x00 0x00 0x00 0x3e 0x3e 0x42 0x42 0x42 0x42 0x3e 0x3e 0x02 0x02 0x7c 0x7c
	__AP_H:			.byte	0x40 0x40 0x40 0x40 0x40 0x40 0x78 0x78 0x44 0x44 0x44 0x44 0x44 0x44 0x00 0x00
	__AP_I:			.byte	0x00 0x00 0x10 0x10 0x00 0x00 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x00 0x00 
	__AP_J:			.byte	0x00 0x00 0x08 0x08 0x00 0x00 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x30 0x30 
	__AP_K:			.byte	0x40 0x40 0x40 0x40 0x46 0x46 0x58 0x58 0x60 0x60 0x58 0x58 0x46 0x46 0x00 0x00 
	__AP_L:			.byte	0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x00 0x00 
	__AP_M:			.byte	0x00 0x00 0x00 0x00 0x68 0x68 0x54 0x54 0x54 0x54 0x54 0x54 0x54 0x54 0x00 0x00 
	__AP_N:			.byte	0x00 0x00 0x00 0x00 0x3c 0x3c 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x00 0x00 
	__AP_O:			.byte	0x00 0x00 0x00 0x00 0x3c 0x3c 0x42 0x42 0x42 0x42 0x42 0x42 0x3c 0x3c 0x00 0x00 
	__AP_P:			.byte	0x00 0x00 0x00 0x00 0x7c 0x7c 0x42 0x42 0x42 0x42 0x7c 0x7c 0x40 0x40 0x40 0x40 
	__AP_Q:			.byte	0x00 0x00 0x00 0x00 0x3e 0x3e 0x42 0x42 0x42 0x42 0x3e 0x3e 0x02 0x02 0x02 0x02 
	__AP_R:			.byte	0x00 0x00 0x00 0x00 0x4e 0x4e 0x50 0x50 0x60 0x60 0x40 0x40 0x40 0x40 0x00 0x00 
	__AP_S:			.byte	0x00 0x00 0x00 0x00 0x3c 0x3c 0x40 0x40 0x3c 0x3c 0x02 0x02 0x7c 0x7c 0x00 0x00 
	__AP_T:			.byte	0x00 0x00 0x10 0x10 0x7c 0x7c 0x10 0x10 0x10 0x10 0x10 0x10 0x0c 0x0c 0x00 0x00 
	__AP_U:			.byte	0x00 0x00 0x00 0x00 0x44 0x44 0x44 0x44 0x44 0x44 0x44 0x44 0x3c 0x3c 0x00 0x00 
	__AP_V:			.byte	0x00 0x00 0x00 0x00 0x44 0x44 0x44 0x44 0x44 0x44 0x28 0x28 0x10 0x10 0x00 0x00 
	__AP_W:			.byte	0x00 0x00 0x00 0x00 0x82 0x82 0x92 0x92 0x92 0x92 0xaa 0xaa 0x44 0x44 0x00 0x00 
	__AP_X:			.byte	0x00 0x00 0x00 0x00 0xc4 0xc4 0x28 0x28 0x10 0x10 0x28 0x28 0x46 0x46 0x00 0x00 
	__AP_Y:			.byte	0x00 0x00 0x00 0x00 0x44 0x44 0x44 0x44 0x44 0x44 0x3c 0x3c 0x04 0x04 0x78 0x78 
	__AP_Z:			.byte	0x00 0x00 0x00 0x00 0x7e 0x7e 0x04 0x04 0x18 0x18 0x20 0x20 0x7e 0x7e 0x00 0x00 
	__AP_BRACK2_O:	.byte	0x06 0x06 0x04 0x04 0x04 0x04 0x08 0x08 0x04 0x04 0x04 0x04 0x06 0x06 0x00 0x00
	__AP_OR:		.byte	0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x00 0x00
	__AP_BRACK2_C:	.byte	0xC0 0xC0 0x40 0x40 0x40 0x40 0x20 0x20 0x40 0x40 0x40 0x40 0xC0 0xC0 0x00 0x00
	.byte					0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

