# **************************************************************************** #
#                                                           LE - /             #
#                                                               /              #
#    lib_maths.gbs                                    .::    .:/ .      .::    #
#                                                  +:+:+   +:    +:  +:+:+     #
#    By: fcordon <marvin@le-101.fr>                 +:+   +:    +:    +:+      #
#                                                  #+#   #+    #+    #+#       #
#    Created: 2019/09/15 16:51:47 by fcordon      #+#   ##    ##    #+#        #
#    Updated: 2019/09/20 22:39:05 by fcordon     ###    #+. /#+    ###.fr      #
#                                                          /                   #
#                                                         /                    #
# **************************************************************************** #

## SQRT

#_mul_16:	##	mul_16(HL = number, DE = multiplier)	# result = {HL}

_sqrt_16:	##sqrt(HL = number)	# return = {HL = result}
#{
#	max = 127 * 127 + 111 * 111 = 0x6F22 (28450) = 168 * 168
	push	DE
	push	BC

	xor		A
	cp		A,	H
	jrnz	__next
	cp		A,	L
	jrz		__ret_0
	ld		A,	1
	cp		A,	L
	jrnz	__next
	__ret_1:
	ld		L,	1
	jr		__SQRT16_return
	__ret_0:
	ld		L,	0
	jr		__SQRT16_return
	


__next:
	ld		B,	H
	ld		C,	L

	ld		H,	0
	ld		L,	2
	ld		D,	0
	ld		E,	L

	__SQRT16_loop:
		call	_mul_16
		ld		A,	H
		cp		A,	B
		jrz		__check_low
		jrnc	__SQRT16_return_dec_E
		jr		__SQRT16_next_number
		__check_low:
		ld		A,	L
		cp		A,	C
		jrz		__SQRT16_return_E
		jrnc	__SQRT16_return_dec_E
		__SQRT16_next_number:
		inc		E
		ld		L,	E
		ld		H,	0
		jr		__SQRT16_loop

	__SQRT16_return_dec_E:
		dec	E
	__SQRT16_return_E:
		ld	L,	E
	__SQRT16_return:
		ld	H,	0
		pop	BC
		pop	DE
		ret


#	__SQRT16_table_hi:
#		.byte	0		0		0		0		0		0		0		0\
#				0		0		0		0		0		0		0		0\
#				1		1		1		1		1		1		1		2\
#				2		2		2		2		3		3		3		3\
#				4		4		4		4		5		5		5		5\
#				6		6		6		7		7		7		8		8\
#				9		9		9		10		10		10		11		11\
#				12		12		13		13		14		14		15		15\
#				16		16		17		17		18		18		19		19\
#				20		20		21		21		22		23		23		24\
#				25		25		26		26		27		28		28		29\
#				30		30		31		32		33		33		34		35\
#				36		36		37		38		39		39		40		41\
#				42		43		43		44		45		46		47		48\
#				49		49		50		51		52		53		54		55\
#				56		57		58		59		60		61		62		63\
#				64		65		66		67		68		69		70		71\
#				72		73		74		75		76		77		78		79\
#				81		82		83		84		85		86		87		89\
#				90		91		92		93		95		96		97		98\
#				100		101		102		103		105		106		107		108\
#				110		111

#}

_sqrt_8:	##sqrt(A = number)	# return = {A = result}
#{
	push	BC
	push	DE
	push	HL
	ld		D,	0
	ld		E,	15
	ld		B,	A

	__SQRT8_loop:
		ld		HL,	__SQRT8_table_lo
		add		HL,	DE
		ld		A,	[HL]
		sub		A,	B
		jrnc	__SQRT8_ret_E
		dec		E
		jr		__SQRT8_loop
	
	__SQRT8_ret_E:
		ld	A,	E
		pop	HL
		pop	DE
		pop	BC
		ret

	__SQRT8_table_lo:
		.byte	0		1		4		9		16		25		36		49\
				64		81		100		121		144		169		196		225\
				0		0x21	0x44	0x69	0x90	0xB9	0xE4	0x11\
				0x40	0x71	0xA4	0xD9	0x10	0x49	0x84	0xC1\
				0x00	0x41	0x84	0xC9	0x10	0x59	0xA4	0xF1\
				0x40	0x91	0xE4	0x39	0x90	0xE9	0x44	0xA1\
				0x00	0x61	0xC4	0x29	0x90	0xF9	0x64	0xD1\
				0x40	0xB1	0x24	0x99	0x10	0x89	0x04	0x81\
				0x00	0x81	0x04	0x89	0x10	0x99	0x24	0xB1\
				0x40	0xD1	0x64	0xF9	0x90	0x29	0xC4	0x61\
				0x00	0xA1	0x44	0xE9	0x90	0x39	0xE4	0x91\
				0x40	0xF1	0xA4	0x59	0x10	0xC9	0x84	0x41\
				0x00	0xC1	0x84	0x49	0x10	0xD9	0xA4	0x71\
				0x40	0x11	0xE4	0xB9	0x90	0x69	0x44	0x21\
				0x00	0xE1	0xC4	0xA9	0x90	0x79	0x64	0x51\
				0x40	0x31	0x24	0x19	0x10	0x09	0x04	0x01\
				0x00	0x01	0x04	0x09	0x10	0x19	0x24	0x31\
				0x40	0x51	0x64	0x79	0x90	0xA9	0xC4	0xE1\
				0x00	0x21	0x44	0x69	0x90	0xB9	0xE4	0x11\
				0x40	0x71	0xA4	0xD9	0x10	0x49	0x84	0xC1\
				0x00	0x41	0x84	0xC9	0x10	0x59	0xA4	0xF1\
				0x40	0x91


#}


## DIV

_div_8:	## div(A = number, C = diviser)	## return {A = result, B = remainder}
#{
	push	DE

	ld		D,	C
	ld		B,	A
	ld		E,	255
	__DIV8_loop:
		inc	E
		sub	A,	C
		jrc	__DIV8_return_carry
		jrnz	__DIV8_loop
		inc	E
		jr	__DIV8_return_no_carry

	__DIV8_return_carry:
	add	A,	C
	__DIV8_return_no_carry:
	ld	C,	D
	ld	B,	A
	ld	A,	E

	pop	DE	
	ret
#}




%define last_num	0xFF94
_div_16:	##	div(HL = number, DE = diviser)	# ret{result = HL, remainder = DE}
#{
	push	BC

	push	HL
	push	DE
	pop		HL
	pop		DE

	ld		BC,	0xFFFF

	__DIV16_loop:
		inc		BC
		
		ld		A,	E
		ld		[last_num],	A
		sub		A,	L
		ld		E,	A
		ld		A,	D
		ld		[last_num + 1],	A
		sbb		A,	H
		ld		D,	A
		jrc		__DIV16_return_carry

		ld		A,	[last_num + 1]
		cp		A,	L
		jrnz	__DIV16_loop
		ld		A,	[last_num]
		cp		A,	H
		jrnz	__DIV16_loop

	ld	H,	B
	ld	L,	C
	pop	BC
	ret

	__DIV16_return_carry:
	ld		A,	E
	add		A,	L
	ld		E,	A
	ld		A,	D
	adc		A,	H
	ld		D,	A

	ld	H,	B
	ld	L,	C
	pop	BC
	ret


#}


## MUL

						
_mul_8:	##mul(n = A, mul = C)	## return {HL = result}
#{
	push	DE
	push	BC

	ld		D,	0
	ld		E,	A
	ld		HL,	0
	xor		A
	__MUL8_loop:
		srl		C
		jrnc	__MUL8_shift_de

		add		HL,	DE
		__MUL8_shift_de:
		jrz		__MUL8_return
		sla		E
		rl		D
		jr		__MUL8_loop
	
	__MUL8_return:
		pop		BC
		pop		DE
		ret

#}


_mul_16:	## mul(num = HL, mul = DE)		# return {result = HL}
#{
	push	DE
	push	BC

	ld		B,	H
	ld		C,	L
	ld		HL,	0
	__MUL16_loop:
		ld		A,	E
		or		A,	D
		jrz		__MUL16_return

		srl		D
		rr		E
		jrnc	__MUL16_shift_bc

		add		HL,	BC
		__MUL16_shift_bc:
		sla		C
		rl		B
		jr		__MUL16_loop

	
	__MUL16_return:
		pop		BC
		pop		DE
		ret

#}

