# **************************************************************************** #
#                                                           LE - /             #
#                                                               /              #
#    ascii.gbs                                        .::    .:/ .      .::    #
#                                                  +:+:+   +:    +:  +:+:+     #
#    By: mhouppin <mhouppin@le-101.fr>              +:+   +:    +:    +:+      #
#                                                  #+#   #+    #+    #+#       #
#    Created: 2019/08/06 10:48:21 by mhouppin     #+#   ##    ##    #+#        #
#    Updated: 2019/08/09 08:36:06 by fcordon     ###    #+. /#+    ###.fr      #
#                                                          /                   #
#                                                         /                    #
# **************************************************************************** #

.bank		1,	0x1000

.memlock	ascii_block, 0xC500, 0xC600
.var1		str_iterator, ascii_block
.var1		str_size, ascii_block

ascii_table:

__ascii_load: ; A: char, E: vram offset
		push	BC
		push	DE
		mov		L,		E
		mov		H,		0
		add		HL,		HL
		add		HL,		HL
		add		HL,		HL
		add		HL,		HL
		mov		A,		0x90
		add		A,		H
		mov		H,		A
		push	HL
		pop		BC
		; BC = VRAM BG pointer

		mov		L,		A
		mov		H,		0
		add		HL,		HL
		add		HL,		HL
		add		HL,		HL
		add		HL,		HL
		mov		DE,		ascii_table
		add		HL,		DE
		; HL = char data pointer

		mov		E,		16

	__ascii_load_loop:
		mov		A,		[HL++]
		mov		[BC],	A
		inc		BC
		dec		E
		jrnz	__ascii_load_loop

		pop		DE
		pop		BC
		ret

_ascii_print: ; BC: string address, E: bytecount
		push	BC
		push	DE
		xor		A
		mov		[str_iterator],	A
		mov		A,				E
		mov		[str_size],		A
		mov		A,				[0xFF00 + LCDC]
		testb	7,				A
		jrz		__ascii_offscreen
		; If screen is already cut, we don't need to stop it

	__ascii_wait_vt_blank:
		mov		A,		[0xFF00 + STAT]
		and		A,		3
		cmp		A,		1
		jrnz	__ascii_wait_vt_blank
		; Wait for vertical blanking to come for stopping screen

		mov		HL,		0xFF00 + LCDC
		reset	7,		[HL]

	__ascii_offscreen:
		mov		A,				[str_iterator]
		mov		E,				A
		mov		A,				[str_size]
		cmp		E
		jrz		__ascii_end
		mov		A,				[BC]
		call	__ascii_load
		inc		BC
		mov		A,				[str_iterator]
		inc		A
		mov		[str_iterator],	A
		jr		__ascii_offscreen
		; Load bytes one by one with the routine __ascii load

	__ascii_end:
		mov		HL,		0xFF00 + LCDC
		set		7,		[HL]
		pop		DE
		pop		BC
		ret
		; Then restore parameters
